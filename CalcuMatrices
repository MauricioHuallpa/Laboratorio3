/*LAB#2 Huallpa Quino Mauricio R.
        Zambrana Morales Ana Paola
        a)triangulos*/

#include <iostream>
#include <windows.h>
#include <stdio.h>
using namespace std;

COORD coord={0,0};

void gotoxy(int x, int y)
{
	coord.X=x;
	coord.Y=y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),coord);
}
 
void leerMatriz( int **A, int m, int n );
void imprimirMatriz( int **A, int m, int n );
void menu();
void sumaMatrices();
void restaMatrices();
void multiplicacionMatrices();
void divisionMatrices();
int inversaMatriz();
void matrizElevada();
void matrizTraspuesta();
void factorizacionLU();
void rangodelaMatriz();
int multiplicarEscalar();
void matrizTriangular();
void autovaloresautovectores();
int matrizDiagonal();
void determinante();

 
int main()
{
    int opcion;
    cout<<"\n\t LAB#3   Huallpa Quino Mauricio Rodrigo\n";
	cout<<"\t\t Zambrana Morales Ana Paola\n";
	cout<<"\n\t----------------------CALCULADORA DE MATRICES--------------------------\n";
    do{
        menu();
        cout<<"\t Opcion :"; cin >> opcion;
        system("cls");
        if( cin.fail() || cin.bad() ){
            opcion = 0;
            cin.clear();
            cin.ignore( '\n', 80 );
        }
        switch( opcion ){
            case 1:
                sumaMatrices();
                break;
            case 2:
                restaMatrices();
                break;
            case 3:
                multiplicacionMatrices();
                break;
            case 4:
                divisionMatrices();
                break;
            case 5:
                inversaMatriz();
                break;
            case 6:
                matrizElevada();
                break;
            case 7:
            	matrizTraspuesta();
                break;
            case 8:
            	factorizacionLU();
                break;
            case 9:
            	rangodelaMatriz();
                break;
            case 10:
            	multiplicarEscalar();
                break;
            case 11:
            	matrizTriangular();
                break;
            case 12:
            	autovaloresautovectores();
                break;
            case 13:
            	matrizDiagonal();
                break;
            case 14:
            	determinante();
            	break;
            case 15:
                cout << "\n\nFIN DEL PROGRAMA\n\n";
                break;
            default:
                cout << "\n\nOPCION NO VALIDA\n\n";
                break;
        }
 
    }while( opcion != 7 );
}

void menu()
{
    cout<<"\n\t Digite la operacion que desea hacer ";
	cout<<"\n\t ----------------------------------------------------------------------";
	cout<<"\n\t 1. Suma de Matrices (A + B)          2. Resta de Matrices (A - B)";
	cout<<"\n\t 3. Multiplicacion de Matrices(A x B) 4. Division de Matrices (A / B)";
	cout<<"\n\t 5. Inversa de la Matriz              6. Matriz Elevada ";
	cout<<"\n\t 7. Traspuesta de la Matriz           8. Factorizacion LU ";
	cout<<"\n\t 9. Rango de la matriz                10. Matriz multiplicada por escalar  ";
	cout<<"\n\t 11. Matriz Triangular                12. Autovalores y Autovectores ";
	cout<<"\n\t 13. Matriz Diagonal                  14. Determinante";
	cout<<"\n\t 15. Salir    ";
	cout<<"\n\t ----------------------------------------------------------------------\n";
 
}
 
void leerMatriz( int **A, int m, int n )
{
    cout << "\n\tRellenar la matriz:\n";
    for( int i = 0; i < m; i++ ){
        for( int j = 0; j < n; j++ ){
            cout << "\tMatriz [" << i << "][" << j << "]: ";
            cin >> A[i][j];
        }
    }
}
 
void imprimirMatriz( int **A, int m, int n )
{
    for( int i = 0; i < m; i++ ){
        cout << "\n\t\t| ";
        for( int j = 0; j < n; j++ )
            cout << A[i][j] << " ";
 
        cout << " |";
    }
    cout << endl;
} 
 
void sumaMatrices()
{
    int m, n;
 
    cout << "\n\t Para la Suma de matrices ,Las matrices deben tener las mismas dimensiones\n"
         << "\n\t Introdusca las dimensiones:";
    cout << "\n\t Filas 'm': "; cin >> m;
    cout << "\t Columnas 'n': "; cin >> n;
 
    int** A = new int*[m];
    for( int i = 0; i < m; i++ )
        A[i] = new int[n];
 
    int** B = new int*[m];
    for( int i = 0; i < m; i++ )
        B[i] = new int[n];
 
    int** C = new int*[m];
    for( int i = 0; i < m; i++ )
        C[i] = new int[n];
 
    cout << "\n\tDatos de la matriz A: ";
    leerMatriz( A, m, n );
 
    cout << "\n\tDatos de la matriz B: ";
    leerMatriz( B, m, n );
 
    for( int i = 0; i < m; i++ )
        for( int j = 0; j < n; j++ )
            C[i][j] = A[i][j] + B[i][j];
 
    cout << "\n\tMatriz A:\n";
    imprimirMatriz( A, m, n );
    cout << "\n\tMatriz B:\n";
    imprimirMatriz( B, m, n );
    cout << "\n\tSuma de las matrices (A+B):\n";
    imprimirMatriz( C, m, n );
 
}
 
void restaMatrices()
{
    int m, n;
 
    cout << "\n\t Para la Resta de matrices ,Las matrices deben tener las mismas dimensiones\n";
    cout << "\n\t Introdusca las dimensiones:";
    cout << "\n\t Filas 'm': "; cin >> m;
    cout << "\t Columnas 'n': "; cin >> n;
 
    int** A = new int*[m];
    for( int i = 0; i < m; i++ )
        A[i] = new int[n];
 
    int** B = new int*[m];
    for( int i = 0; i < m; i++ )
        B[i] = new int[n];
 
    int** C = new int*[m];
    for( int i = 0; i < m; i++ )
        C[i] = new int[n];
 
    cout << "\n\tDatos de la matriz A: ";
    leerMatriz( A, m, n );
 
    cout << "\n\tDatos de la matriz B: ";
    leerMatriz( B, m, n );
 
    for( int i = 0; i < m; i++ )
        for( int j = 0; j < n; j++ )
            C[i][j] = A[i][j] - B[i][j];
 
    cout << "\n\tMatriz A:\n";
    imprimirMatriz( A, m, n );
    cout << "\n\tMatriz B:\n";
    imprimirMatriz( B, m, n );
    cout << "\n\tSuma de las matrices (A+B):\n";
    imprimirMatriz( C, m, n );
}
 
void multiplicacionMatrices()
{
    int m, n, r, s;
 
    cout << "\n\t Para la Multiplicacion de matrices";
    cout << "\n\t el numero de Columnas de A debe ser igual al numero de filas de B";
    cout << "\n\t Para la Multiplicacion de matrices";
    cout << "\n\t Dimension de la matriz A:";
    cout << "\n\t Filas 'm': "; cin >> m;
    cout << "\t Columnas 'n': "; cin >> n;
 
    int** A = new int*[m];
    for( int i = 0; i < m; i++ )
        A[i] = new int[n];
 
    leerMatriz( A, m, n );
 
    cout << "\n\t Dimension de la matriz B:";
    cout << "\n\t Filas 'r': "; cin >> r;
    cout << "\t Columnas 's': "; cin >> s;
 
    int** B = new int*[r];
    for( int i = 0; i < r; i++ )
        B[i] = new int[s];
 
    leerMatriz( B, r, s );
 
    int** C = new int*[m];
    for( int i = 0; i < m; i++ )
        C[i] = new int[n];
 
    if( n == r ){
        for( int i = 0; i < m; ++i ){
            for( int j = 0; j < s; ++j ){
                C[i][j] = 0;
                for( int z = 0; z < n; ++z )
                    C[i][j] += A[i][z] * B[z][j];
            }
        }
 
        cout << "\n\t Matriz A:\n";
        imprimirMatriz( A, m, n );
        cout << "\n\t Matriz B:\n";
        imprimirMatriz( B, r, s );
        cout << "\n\t Multiplicacion de las matrices (A*B):\n";
        imprimirMatriz( C, m, s );
 
    }else
        cout << "\n\t No se puede multiplicar , el numero de columnas de A"
             << "\n\t no coincide con el numero de filas de B"
             << "\n";
 
}
void divisionMatrices()
{
	int  n, i, j, k;
	float aux, pivote, pivote1, det=1;
	cout << "\n\t Para dividir matrices, necesitamos que tengan las mismas dimensiones matriz cuadrada";
    cout << "\n\t Dimension de la matriz n:"; cin>> n;
    
    int** A = new int*[n];
    for( int i = 0; i < n; i++ )
        A[i] = new int[n];
 
    leerMatriz( A, n, n );
    
    int** B = new int*[n];
    for( int i = 0; i < n; i++ )
        B[i] = new int[n];
    
    leerMatriz( B, n, n );
    
    int** I = new int*[n];
    for( int i = 0; i < n; i++ )
        I[i] = new int[n];
        
    leerMatriz( I, n, n );
    
    int** C = new int*[n];
    for( int i = 0; i < n; i++ )
        C[i] = new int[n];
    
    for( i=0;i<n;i++)
	{
    	pivote=B[i][i];
    	for( k=0 ; k<n; k++ ){
    		B[i][k]=B[i][k]/pivote;
    		I[i][k]=I[i][k]/pivote;
			}
		}
		for( j=0 ; j< n; j++)
		{
			if(i!=j)
			{
				aux=B[j][i];
				for(k=0 ; k<n; k++){
					B[j][k]=B[j][k]-aux*B[i][k];
					I[j][k]=I[j][k]-aux*I[i][k];
				}
			}
		}
	for( i=0;i<n;i++)
	{
    	pivote=B[i][i];
    	for( k=0 ; k<n; k++ )
		{
    		C[i][j]=A[i][j]*B[i][k];
		}
	}
	cout << "\n\t Matriz A:\n";
    imprimirMatriz( A, n, n );
    cout << "\n\t Matriz B:\n";
    imprimirMatriz( B, n, n );
    cout << "\n\t Multiplicacion de las matrices (A*B):\n";
    imprimirMatriz( C, n, n );	
}
 
int inversaMatriz()
{
	int  n, i, j, k;
	float aux, pivote,A[n][n],I[n][n];
	cout << "\n\t Para la encontrar la inversa, necesitamos una matriz cuadrada";
    cout << "\n\t Dimension de la matriz n:"; cin>> n;
    
    for(i=0;i<n;i++){
		for(j=0;j<n;j++){
			cout<<"\t Matriz["<<i<<"]["<<j<<"]:";
			cin>>A[i][j];
			I[i][j]=0;
			
			if(i==j){
				I[i][j]=0;
			}
		}
	}

        
    for( i=0;i<n;i++){
    	pivote=A[i][i];
    	for( k=0 ; k<n; k++ ){
    		A[i][k]=A[i][k]/pivote;
    		I[i][k]=I[i][k]/pivote;
			}
		}
		for( j=0 ; j< n; j++){
			if(i!=j)
			{
				aux=A[j][i];
				for(k=0 ; k<n; k++){
					A[j][k]=A[j][k]-aux*A[i][k];
					I[j][k]=I[j][k]-aux*I[i][k];
				}
			}
		}
	cout << "\n\t Matriz A:\n";
    for(i=0;i<n;i++){
		for(j=0;j<n;j++){
			cout<<"\t Matriz inversa de A es:";
			cout<<A[i][j];
			
		}
	}

return main();
}

void matrizElevada()
{
	int m, n;
 
    cout << "\n\t Para la Matriz elevada al cuadrado";
    cout << "\n\t Dimension de la matriz A:";
    cout << "\n\t Dimension de matriz A 'n': "; cin >> n;

    int** A = new int*[n];
    for( int i = 0; i < n; i++ )
        A[i] = new int[n];
 
    leerMatriz( A, n, n );
 
    int** C = new int*[n];
    for( int i = 0; i < n; i++ )
        C[i] = new int[n];
        
    for( int i = 0; i < n; ++i ){
        for( int j = 0; j < n; ++j ){
            C[i][j] = 0;
            for( int z = 0; z < n; ++z )
                C[i][j] += A[i][z] * A[z][j];
        }
    }
 
   
 
    cout << "\n\t Matriz A:\n";
    imprimirMatriz( A, n, n );

    cout << "\n\t Multiplicacion de las matrices (A*A):\n";
    imprimirMatriz( C, n, n );
}
void matrizTraspuesta()
{
	int m, n;
    cout << "\n\t Para la matriz traspuesta";
    cout << "\n\t Introduca las Dimensiones de la matriz A:";
    cout << "\n\t Filas 'm': "; cin >> m;
    cout << "\t Columnas 'n': "; cin >> n;
    int** A = new int*[m];
    for( int i = 0; i < m; i++ )
        A[i] = new int[n];
        
    leerMatriz( A, m, n );
    
    int** B = new int*[m];
    for( int i = 0; i < m; i++ )
        B[i] = new int[n];
        
    for( int i=0 ; i< m; i++){
		for( int j=0 ; j< n; j++){
			B[i][j]= A[j][i];
		}
	}
        
    cout<<"\n\t Matriz original:";
    imprimirMatriz( A, m, n );
    cout<<"\n\t Matriz Traspuesta:\n";
    imprimirMatriz( B, m, n );	
    
}
void factorizacionLU()
{
	int i=0,j=0,k=0,n=0;
	std::cout << "\t\tDESCOMPOSICION LU";
std::cout << std::endl;
std::cout << std::endl;
std::cout << "El orden de la matriz debe ser mayor o igual que 2 y entero." << std::endl;
std::cout << "Ingresa el orden de la matriz: ";
std::cin >> n;

if(n<=1){
    std::cout << std::endl;
    std::cout << "No ha ingresado un valor correcto. Cerrando el programa...";
    std::cout << std::endl;

} else {
    float A[n][n]={0}, B[n]={0}, X[n]={0}, L[n][n]={0}, Y[n]={0}, U[n][n]={0},sum=0;
    std::cout << "La matriz es de " << n << "x" << n <<".";
    std::cout << std::endl << std::endl;


    std::cout<<"Ingrese los coeficientes de la matriz A de coeficientes: ";
    std::cout << std::endl;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            std::cout << "Ingrese el elemento A["<<i+1<<"]["<<j+1<<"]: ";
            std::cin >> A[i][j];
        }
    }
    std::cout << std::endl;



    std::cout<<"Ingrese los coeficientes de la matriz A de coeficientes: ";
    std::cout << std::endl;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            std::cout << "Ingrese el elemento A["<<i+1<<"]["<<j+1<<"]: ";
            std::cin >> A[i][j];
        }
    }
    std::cout << std::endl;


    std::cout << "Ingrese la matriz B:" << std::endl;
    for(i=0;i<n;i++){
        std::cout << "Ingrese el elemento B["<<i+1<<"]: ";
        std::cin >> B[i];
    }


    for(i=0;i<n;i++){
        for(j=0;j<n;j++)
            if(i>j){
              U[i][j]=0;   
            }
            else if(i==j){
              L[i][j]=1;   
            } else{
              L[i][j]=0;   
            }
    }

    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            sum=0;
            if(i<=j){             
                for(k=0;k<n;k++){
                    if(k!=i){
                        sum=sum+L[i][k]*U[k][j];
                    }else {
                        U[i][j]=A[i][j]-sum;            
                    }
                }
            } else{                 
                for(k=0;k<n;k++){
                    if(k!=j){
                        sum=sum+L[i][k]*U[k][j];
                    }else {
                        L[i][j]=(A[i][j]-sum)/U[j][j];      //Llenado de elementos restantes de L
                    }
                }
            }
        }
    }

        printf("\n\n L =");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)

                        printf ("%10.2f",L[i][j]);
            printf("\n    ");
    }

        printf("\n\n U =");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
                         printf ("%10.2f",U[i][j]);
            printf("\n    ");
    }

    Y[0]=B[0]/L[0][0];
    for(i=1;i<n;i++)
    {
        sum=0;
        for(j=0;j<i;j++)
        {
            sum=sum+Y[j]*L[i][j];

        }
        Y[i]=B[i]-sum;
    }
    printf("\n\n Y =");
    for(i=0;i<n;i++)
    {
                printf ("%10.2f",Y[i]);
            printf("\n    ");
    }

    X[n-1]=Y[n-1]/U[n-1][n-1];
    for(i=n-2;i>=0;i--){
        sum=0;
        for(j=n-1;j>i;j--)
            sum=sum+X[j]*U[i][j];
        X[i]=(Y[i]-sum)/U[i][i];
    }

    printf("\nLa solucion es :\n");
    for(i=0;i<n;i++)
        printf("\n x[%d] = %.2f ",i+1,X[i]);
    printf("\n\n");
}
		
}
void rangodelaMatriz()
{	
}
int multiplicarEscalar()
{
	int fil, col, escalar;
 
    printf( "\n\tNumero de filas de la matriz: " );
    scanf( "\t%d", &fil );
    printf( "\tNumero de columnas de la matriz: " );
    scanf( "\t%d", &col );
    printf( "\tEscalar: " );
    scanf( "\t%d", &escalar );
 
    int matriz[fil][col];
 
    printf( "\n\tRellenar matriz:\n" );
    for( int i = 0; i < fil; i++ )
        for( int j = 0; j < col; j++ ) {
            printf( "\t[%d][%d]: ", i, j );
            scanf( "\t%d", &matriz[i][j] );
        }
 
    for( int i = 0; i < fil; i++ )
        for( int j = 0; j < col; j++ )
            matriz[i][j] *= escalar;
 
   for( int i = 0; i < fil; i++ ) {
        printf( "\n\t" );
        for( int j = 0; j < col; j++ ) {
            printf( "\t%d ", matriz[i][j] );
        }
    }
 
    printf( "\n\t" );
 
    return main();

}
void matrizTriangular()
{
	int  n, i, j, k;
	float aux, pivote, pivote1, det=1;
	cout << "\n\t Para la encontrar la determinante, necesitamos una matriz cuadrada";
    cout << "\n\t Dimension de la matriz n:"; cin>> n;
    
    int** A = new int*[n];
    for( int i = 0; i < n; i++ )
        A[i] = new int[n];
 
    leerMatriz( A, n, n );
    
    int** B = new int*[n];
    for( int i = 0; i < n; i++ )
        B[i] = new int[n];
        
    for( i=0;i<n;i++){
    	pivote=A[i][i];
    	for( j=i+1 ; j<n; j++ ){
    		pivote1=A[j][i];
    		aux=pivote1/pivote;
    		for( k=0; k<n ; k++){
    			A[j][k]=A[j][k]-aux*A[i][k];
    			//B[i][j]=A[j][k]-aux*A[i][k];
    		
			}
		}
	}
	cout << "\n\t Matriz Triangular superior de A:\n";
    imprimirMatriz( A, n, n );
	
}
void autovaloresautovectores()
{
	
	
}
int matrizDiagonal()
{
	int sz;
    cout << "Dimensiones de la matriz: ";
    cin >> sz;
 
    sz = sz > 15 ? 15 : sz;
 
    int matriz[sz][sz];
 
    cout << endl;
    for( int i = 0; i < sz; i++ ) {
        cout << " | ";
        for( int j = 0; j < sz; j++ ) {
            if( i == j ) cout << 1 << " ";
            else if( j == sz - 1 - i ) cout << 1 << " ";
            else cout << 9 << " ";
        }
        cout << " |" << endl;
    }
 
    return 0;
	
	
}
void determinante()
{
	int  n, i, j, k;
	float aux, pivote, pivote1, det=1;
	cout << "\n\t Para la encontrar la determinante, necesitamos una matriz cuadrada";
    cout << "\n\t Dimension de la matriz n:"; cin>> n;
    
    int** A = new int*[n];
    for( int i = 0; i < n; i++ )
        A[i] = new int[n];
 
    leerMatriz( A, n, n );
    
    int** B = new int*[n];
    for( int i = 0; i < n; i++ )
        B[i] = new int[n];
        
    for( i=0;i<n;i++){
    	pivote=A[i][i];
    	for( j=i+1 ; j<n; j++ ){
    		pivote1=A[j][i];
    		aux=pivote1/pivote;
    		for( k=0; k<n ; k++){
    			A[j][k]=A[j][k]-aux*A[i][k];
    			//B[i][j]=A[j][k]-aux*A[i][k];
    		
			}
		}
	}
	//para el determinante//
	for(i=0;i<n;i++){
		det*=A[i][i];	
	}
	
	cout << "\n\t Matriz A:\n";
    imprimirMatriz( A, n, n );
    cout << "\n\t LA DETERMINANTE ES IGUAL A :"<<det<<endl;
   
	
}
