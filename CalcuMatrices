/*LAB#2 Huallpa Quino Mauricio R.
        Zambrana Morales Ana Paola
        a)Calculadora Matrices*/

#include <iostream>
#include <windows.h>
#include <stdio.h>
#include <cmath>

using namespace std;

COORD coord={0,0};

void gotoxy(int x, int y)
{
	coord.X=x;
	coord.Y=y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),coord);
}
 
void leerMatriz( int **A, int m, int n );
void imprimirMatriz( int **A, int m, int n );
void menu();
void sumaMatrices();
void restaMatrices();
void multiplicacionMatrices();
int divisionMatrices();
int inversaMatriz();
int matrizElevada();
void matrizTraspuesta();
void factorizacionLU();
void rangodelaMatriz();
int multiplicarEscalar();
void matrizTriangular();
int autovaloresautovectores();
int matrizDiagonal();
void determinante();
void factorizacionCho();

 
int main()
{
    int opcion;
    cout<<"\n\t LAB#3   Huallpa Quino Mauricio Rodrigo             ETN-307L\n";
	cout<<"\t\t Zambrana Morales Ana Paola\n";
	cout<<"\n\t----------------------CALCULADORA DE MATRICES--------------------------\n\n";
	cout<<"\t    | A[1][1]  A[1][2]  A[1][3]..........A[1][n] |\n";
	cout<<"\t    | A[2][1]  A[1][2]  A[1][3]..........A[2][n] |\n";
	cout<<"\t    | A[3][1]  A[1][2]  A[1][3]..........A[3][n] |\n";
	cout<<"\t A= | A[4][1]  A[1][2]  A[1][3]..........A[4][n] |\n";
	cout<<"\t    |    .         .        .    .           .   |\n";
	cout<<"\t    |    .         .        .         .      .   |\n";
	cout<<"\t    | A[m][1]  A[m][2]  A[][3]...........A[m][n] |"<<endl;
	
    do{
        menu();
        cout<<"\t Opcion :"; cin >> opcion;
        system("cls");
        if( cin.fail() || cin.bad() ){
            opcion = 0;
            cin.clear();
            cin.ignore( '\n', 80 );
        }
        switch( opcion ){
            case 1:
                sumaMatrices();
                break;
            case 2:
                restaMatrices();
                break;
            case 3:
                multiplicacionMatrices();
                break;
            case 4:
                divisionMatrices();
                break;
            case 5:
                inversaMatriz();
                break;
            case 6:
                matrizElevada();
                break;
            case 7:
            	matrizTraspuesta();
                break;
            case 8:
            	factorizacionLU();
                break;
            case 9:
            	rangodelaMatriz();
                break;
            case 10:
            	multiplicarEscalar();
                break;
            case 11:
            	matrizTriangular();
                break;
            case 12:
            	autovaloresautovectores();
                break;
            case 13:
            	matrizDiagonal();
                break;
            case 14:
            	determinante();
            	break;
            case 15:
            	factorizacionCho();
            	break;
            case 16:
                cout << "\n\nFIN DEL PROGRAMA\n\n";
                return 0;
                break;
            default:
                cout << "\n\nOPCION NO VALIDA\n\n";
                break;
        }
 
    }while( opcion != 7 );
}

void menu()
{
    cout<<"\n\t Digite la operacion que desea hacer ";
	cout<<"\n\t ----------------------------------------------------------------------";
	cout<<"\n\t 1. Suma de Matrices (A + B)          2. Resta de Matrices (A - B)";
	cout<<"\n\t 3. Multiplicacion de Matrices(A x B) 4. Division de Matrices (A / B)";
	cout<<"\n\t 5. Inversa de la Matriz              6. Matriz Elevada ";
	cout<<"\n\t 7. Traspuesta de la Matriz           8. Factorizacion LU ";
	cout<<"\n\t 9. Rango de la matriz                10. Matriz multiplicada por escalar  ";
	cout<<"\n\t 11. Matriz Triangular                12. Autovalores y Autovectores ";
	cout<<"\n\t 13. Matriz Diagonal                  14. Determinante";
	cout<<"\n\t 15. Factorizacion de Cholesky        16. Salir    ";
	cout<<"\n\t ----------------------------------------------------------------------\n";
 
}
 
void leerMatriz( int **A, int m, int n )
{
    cout << "\n\tRellenar la matriz:\n";
    for( int i = 0; i < m; i++ ){
        for( int j = 0; j < n; j++ ){
            cout << "\tMatriz [" << i << "][" << j << "]: ";
            cin >> A[i][j];
        }
    }
}
 
void imprimirMatriz( int **A, int m, int n )
{
    for( int i = 0; i < m; i++ ){
        cout << "\n\t\t| ";
        for( int j = 0; j < n; j++ )
            cout << A[i][j] << " ";
 
        cout << " |";
    }
    cout << endl;
} 
 
void sumaMatrices()
{
    int m, n;
 
    cout << "\n\t Para la Suma de matrices ,Las matrices deben tener las mismas dimensiones\n"
         << "\n\t Introdusca las dimensiones:";
    cout << "\n\t Filas 'm': "; cin >> m;
    cout << "\t Columnas 'n': "; cin >> n;
 
    int** A = new int*[m];
    for( int i = 0; i < m; i++ )
        A[i] = new int[n];
 
    int** B = new int*[m];
    for( int i = 0; i < m; i++ )
        B[i] = new int[n];
 
    int** C = new int*[m];
    for( int i = 0; i < m; i++ )
        C[i] = new int[n];
 
    cout << "\n\tDatos de la matriz A: ";
    leerMatriz( A, m, n );
 
    cout << "\n\tDatos de la matriz B: ";
    leerMatriz( B, m, n );
 
    for( int i = 0; i < m; i++ )
        for( int j = 0; j < n; j++ )
            C[i][j] = A[i][j] + B[i][j];
 
    cout << "\n\tMatriz A:\n";
    imprimirMatriz( A, m, n );
    cout << "\n\tMatriz B:\n";
    imprimirMatriz( B, m, n );
    cout << "\n\tSuma de las matrices (A+B):\n";
    imprimirMatriz( C, m, n );
 
}
 
void restaMatrices()
{
    int m, n;
 
    cout << "\n\t Para la Resta de matrices ,Las matrices deben tener las mismas dimensiones\n";
    cout << "\n\t Introdusca las dimensiones:";
    cout << "\n\t Filas 'm': "; cin >> m;
    cout << "\t Columnas 'n': "; cin >> n;
 
    int** A = new int*[m];
    for( int i = 0; i < m; i++ )
        A[i] = new int[n];
 
    int** B = new int*[m];
    for( int i = 0; i < m; i++ )
        B[i] = new int[n];
 
    int** C = new int*[m];
    for( int i = 0; i < m; i++ )
        C[i] = new int[n];
 
    cout << "\n\tDatos de la matriz A: ";
    leerMatriz( A, m, n );
 
    cout << "\n\tDatos de la matriz B: ";
    leerMatriz( B, m, n );
 
    for( int i = 0; i < m; i++ )
        for( int j = 0; j < n; j++ )
            C[i][j] = A[i][j] - B[i][j];
 
    cout << "\n\tMatriz A:\n";
    imprimirMatriz( A, m, n );
    cout << "\n\tMatriz B:\n";
    imprimirMatriz( B, m, n );
    cout << "\n\tSuma de las matrices (A+B):\n";
    imprimirMatriz( C, m, n );
}
 
void multiplicacionMatrices()
{
    int m, n, r, s;
 
    cout << "\n\t Para la Multiplicacion de matrices";
    cout << "\n\t el numero de Columnas de A debe ser igual al numero de filas de B";
    cout << "\n\t Para la Multiplicacion de matrices";
    cout << "\n\t Dimension de la matriz A:";
    cout << "\n\t Filas 'm': "; cin >> m;
    cout << "\t Columnas 'n': "; cin >> n;
 
    int** A = new int*[m];
    for( int i = 0; i < m; i++ )
        A[i] = new int[n];
 
    leerMatriz( A, m, n );
 
    cout << "\n\t Dimension de la matriz B:";
    cout << "\n\t Filas 'r': "; cin >> r;
    cout << "\t Columnas 's': "; cin >> s;
 
    int** B = new int*[r];
    for( int i = 0; i < r; i++ )
        B[i] = new int[s];
 
    leerMatriz( B, r, s );
 
    int** C = new int*[m];
    for( int i = 0; i < m; i++ )
        C[i] = new int[n];
 
    if( n == r ){
        for( int i = 0; i < m; ++i ){
            for( int j = 0; j < s; ++j ){
                C[i][j] = 0;
                for( int z = 0; z < n; ++z )
                    C[i][j] += A[i][z] * B[z][j];
            }
        }
 
        cout << "\n\t Matriz A:\n";
        imprimirMatriz( A, m, n );
        cout << "\n\t Matriz B:\n";
        imprimirMatriz( B, r, s );
        cout << "\n\t Multiplicacion de las matrices (A*B):\n";
        imprimirMatriz( C, m, s );
 
    }else
        cout << "\n\t No se puede multiplicar , el numero de columnas de A"
             << "\n\t no coincide con el numero de filas de B"
             << "\n";
 
}
int divisionMatrices()
{
	int m=3, n=2, opcion2,i,j,k,z,determinante;
	float B[m][m],Adj[m][m],Inv[m][m],A[m][m],C[m][m];
	cout<<"\t\n\t Division de matrices A*B^-1 ";
	cout<<"\t\n\t determinar dimension de la matriz cuadrada A ";
	cout<<"\t\n\t 1- Dimension = 3";
	cout<<"\t\n\t 2- Dimension = 2\n";
	cout<<"\t Opcion : ";cin>> opcion2;
	switch(opcion2){
		case 1:
			for(i=0;i<m;i++){
				for(j=0;j<m;j++){
					cout<<"\t Valores de la Matriz A ["<<i<<"]["<<j<<"] = ";
					cin>>A[i][j];
				}
			}
			cout<<"\n";
			for(i=0;i<m;i++){
				for(j=0;j<m;j++){
					cout<<"\t Valores de la Matriz B ["<<i<<"]["<<j<<"] = ";
					cin>>B[i][j];
				}
			}
			determinante= B[0][0]*(B[1][1]*B[2][2]-B[2][1]*B[1][2])+
			              B[1][0]*(B[2][1]*B[0][2]-B[0][1]*B[2][2])+
			              B[2][0]*(B[0][1]*B[1][2]-B[1][1]*B[0][2]);
			if (determinante!=0){
				for(i=0;i<m;i++){
					for(j=0;j<m;j++){
						Adj[i][j]=(B[(i+1)%m][(j+1)%m]*B[(i+2)%m][(j+2)%m]-
						           B[(i+1)%m][(j+2)%m]*B[(i+2)%m][(j+1)%m]);
						Inv[j][i]=Adj[i][j]/determinante;	
					}
				}
				for( int i = 0; i < m; ++i ){
					for( int j = 0; j < m; ++j ){
						C[i][j] = 0;
						for( int z = 0; z < n; ++z ){
							C[i][j] += A[i][z] * Inv[z][j];
						}
					}
				}
				cout<<"\t\n\t La Matriz inversa B^(-1) es :"<<endl;
				for(i=0;i<m;i++){
				cout << "\n\t\t | ";
					for(j=0;j<m;j++){
						cout<<Inv[i][j]<<"\t ";
					}
					cout<<"\n ";
				}	
				cout<<"\t\n\t La Matriz resultante de A*(B^-1) es :"<<endl;
				for(i=0;i<m;i++){
				cout << "\n\t\t | ";
					for(j=0;j<m;j++){
						cout<<C[i][j]<<"\t ";
						
					}
					cout<<"\n ";
				}		
			}
			else{
				cout<<"\t\n La Matriz no tiene inversa ya que el determinante es igual a 0\n\n";	
			}
			break;
		case 2:
			for(i=0;i<n;i++){
				for(j=0;j<n;j++){
					cout<<"\t Valores de la Matriz A ["<<i<<"]["<<j<<"] = ";
					cin>>A[i][j];
				}
			}
			cout<<"\n";
			for(i=0;i<n;i++){
				for(j=0;j<n;j++){
					cout<<"\t Valores de la Matriz B ["<<i<<"]["<<j<<"] = ";
					cin>>B[i][j];
				}
			}
			determinante= B[0][0]*B[1][1]-B[1][0]*B[0][1];

			if (determinante!=0){
				
				Adj[0][0]=B[1][1];
				Adj[0][1]=-B[1][0];
				Adj[1][0]=-B[0][1];
				Adj[1][1]=B[0][0];
				
				for(i=0;i<n;i++){
					for(j=0;j<n;j++){
						Inv[j][i]=Adj[i][j]/determinante;	
					}
				}
				for( int i = 0; i < n; ++i ){
					for( int j = 0; j < n; ++j ){
						C[i][j] = 0;
						for( int z = 0; z < n; ++z ){
							C[i][j] += A[i][z] * Inv[z][j];
						}
					}
				}
				cout<<"\t\n\t La Matriz inversa B^(-1) es :"<<endl;
				for(i=0;i<n;i++){
				cout << "\n\t\t | ";
					for(j=0;j<n;j++){
						cout<<Inv[i][j]<<"\t ";
					}
					cout<<"\n ";
				}
				cout<<"\t\n\t La Matriz resultante de A*(B^-1) es :"<<endl;
				for(i=0;i<n;i++){
				cout << "\n\t\t | ";
					for(j=0;j<n;j++){
						cout<<C[i][j]<<"\t ";
						
					}
					cout<<"\n ";
				}			
			}
			else{
				cout<<"\t\n La Matriz no tiene inversa ya que el determinante es igual a 0\n\n";	
			}
			break;
		default:
			cout<<"\n Opcion no valida";
			break;
	}
return main();
}
 
int inversaMatriz()
{
	int m=3, n=2, opcion2,i,j,k,determinante;
	float A[m][m],Adj[m][m],Inv[m][m];
	cout<<"\t\n\t Matriz Inversa A^-1";
	cout<<"\t\n\t determinar dimension de la matriz cuadrada A ";
	cout<<"\t\n\t 1- Dimension = 3";
	cout<<"\t\n\t 2- Dimension = 2\n";
	cout<<"\t Opcion : ";cin>> opcion2;
	switch(opcion2){
		case 1:
			for(i=0;i<m;i++){
				for(j=0;j<m;j++){
					cout<<"\t Valores de la Matriz ["<<i<<"]["<<j<<"] = ";
					cin>>A[i][j];
				}
			}
			determinante= A[0][0]*(A[1][1]*A[2][2]-A[2][1]*A[1][2])+
			              A[1][0]*(A[2][1]*A[0][2]-A[0][1]*A[2][2])+
			              A[2][0]*(A[0][1]*A[1][2]-A[1][1]*A[0][2]);
			if (determinante!=0){
				for(i=0;i<m;i++){
					for(j=0;j<m;j++){
						Adj[i][j]=(A[(i+1)%m][(j+1)%m]*A[(i+2)%m][(j+2)%m]-
						           A[(i+1)%m][(j+2)%m]*A[(i+2)%m][(j+1)%m]);
						Inv[j][i]=Adj[i][j]/determinante;	
					}
				}
				cout<<"\t\n\t La Matriz Ingresada es :"<<endl;
				for(i=0;i<m;i++){
				cout << "\n\t\t | ";
					for(j=0;j<m;j++){
						cout<<A[i][j]<<"\t ";
					}
					cout<<"\n ";
				}
				cout<<"\t\n\t La Matriz Adjunta es :"<<endl;
				for(i=0;i<m;i++){
				cout << "\n\t\t | ";
					for(j=0;j<m;j++){
						cout<<Adj[i][j]<<"\t ";
					}
					cout<<"\n ";
				}
				cout<<"\t\n\t La Matriz inversa es :"<<endl;
				for(i=0;i<m;i++){
				cout << "\n\t\t | ";
					for(j=0;j<m;j++){
						cout<<Inv[i][j]<<"\t ";
					}
					cout<<"\n ";
				}			
			}
			else{
				cout<<"\t\n La Matriz no tiene inversa ya que el determinante es igual a 0\n\n";	
			}
			break;
		case 2:
			for(i=0;i<n;i++){
				for(j=0;j<n;j++){
					cout<<"\t Valores de la Matriz ["<<i<<"]["<<j<<"] = ";
					cin>>A[i][j];
				}
			}
			determinante= A[0][0]*A[1][1]-A[1][0]*A[0][1];

			if (determinante!=0){
				
				Adj[0][0]=A[1][1];
				Adj[0][1]=-A[1][0];
				Adj[1][0]=-A[0][1];
				Adj[1][1]=A[0][0];
				
				for(i=0;i<n;i++){
					for(j=0;j<n;j++){
						Inv[j][i]=Adj[i][j]/determinante;	
					}
				}
				cout<<"\t\n\t La Matriz Ingresada es :"<<endl;
				for(i=0;i<n;i++){
				cout << "\n\t\t | ";
					for(j=0;j<n;j++){
						cout<<A[i][j]<<"\t ";
					}
					cout<<"\n ";
				}
				cout<<"\t\n\t La Matriz Adjunta es :"<<endl;
				for(i=0;i<n;i++){
				cout << "\n\t\t | ";
					for(j=0;j<n;j++){
						cout<<Adj[i][j]<<"\t ";
					}
					cout<<"\n ";
				}
				cout<<"\t\n\t La Matriz inversa es :"<<endl;
				for(i=0;i<n;i++){
				cout << "\n\t\t | ";
					for(j=0;j<n;j++){
						cout<<Inv[i][j]<<"\t ";
					}
					cout<<"\n ";
				}			
			}
			else{
				cout<<"\t\n La Matriz no tiene inversa ya que el determinante es igual a 0\n\n";	
			}
			break;
		default:
			cout<<"\n Opcion no valida";
			break;
	}
return main();
}

int matrizElevada()
{
	int m, n, potencia;
	cout << "\n\t Calculo de la Matriz a la N'sima potencia";
    cout << "\n\t el numero de Columnas debe ser igual al numero de filas ";
    cout << "\n\t Dimension de la matriz A:";
    cout << "\n\t Filas 'm': "; cin >> m;
    cout << "\t Columnas 'n': "; cin >> n;

    int A[m][n];
 
    cout << "\n\t Introducir datos d ela matriz:\n";
    for (int i = 0; i < m; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cout<<"\t Valores de la Matriz ["<<i<<"]["<<j<<"] = ";
			cin>>A[i][j];
        }
    }
    cout << "\n\t Potencia: "; cin >> potencia;
    cout << "\n\t El resultado de la matriz A^("<<potencia<<") es :\n\n";
    for (int i = 0; i < m; i++)
    {
        cout << "\t\t |";
        for (int j = 0; j < n; j++)
        {
            cout << pow(A[i][j], potencia) << " \t";
        }
        cout << " |\n\n";
    }
 
    cout << endl;
 
    return main();
}
void matrizTraspuesta()
{
	int m, n;
    cout << "\n\t Para la matriz traspuesta";
    cout << "\n\t Introduca las Dimensiones de la matriz A:";
    cout << "\n\t Filas 'm': "; cin >> m;
    cout << "\t Columnas 'n': "; cin >> n;
    int** A = new int*[m];
    for( int i = 0; i < m; i++ )
        A[i] = new int[n];
        
    leerMatriz( A, m, n );
    
    int** B = new int*[m];
    for( int i = 0; i < m; i++ )
        B[i] = new int[n];
        
    for( int i=0 ; i< m; i++){
		for( int j=0 ; j< n; j++){
			B[i][j]= A[j][i];
		}
	}
        
    cout<<"\n\t Matriz original:";
    imprimirMatriz( A, m, n );
    cout<<"\n\t Matriz Traspuesta:\n";
    imprimirMatriz( B, m, n );	
    
}
void factorizacionLU()
{
	int i=0,j=0,k=0,n=0;
	cout << "\t DESCOMPOSICION LU";
cout << endl;
cout << "\t El orden de la matriz debe ser mayor o igual que 2 y entero." << endl;
cout << "\t Ingresa el orden de la matriz: ";
cin >> n;

if(n<=1){
    cout << endl;
    cout << "\t No ha ingresado un valor correcto. Cerrando el programa...";
    cout << endl;

} else {
    float A[n][n]={0}, B[n]={0}, X[n]={0}, L[n][n]={0}, Y[n]={0}, U[n][n]={0},sum=0;
    cout << "\t La matriz es de " << n << "x" << n <<".";
    cout << endl << endl;


    cout<<"\t Ingrese los coeficientes de la matriz A de coeficientes: ";
    cout << endl;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            cout << "\t Ingrese el elemento A["<<i<<"]["<<j<<"]: ";
            cin >> A[i][j];
        }
    }
    cout <<endl;
    cout << "\t Ingrese la matriz B:" << endl;
    for(i=0;i<n;i++){
        cout << "\t Ingrese el elemento B["<<i<<"]: ";
        cin >> B[i];
    }
    for(i=0;i<n;i++){
        for(j=0;j<n;j++)
            if(i>j){
              U[i][j]=0;   
            }
            else if(i==j){
              L[i][j]=1;   
            } else{
              L[i][j]=0;   
            }
    }

    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            sum=0;
            if(i<=j){             
                for(k=0;k<n;k++){
                    if(k!=i){
                        sum=sum+L[i][k]*U[k][j];
                    }else {
                        U[i][j]=A[i][j]-sum;            
                    }
                }
            } else{                 
                for(k=0;k<n;k++){
                    if(k!=j){
                        sum=sum+L[i][k]*U[k][j];
                    }else {
                        L[i][j]=(A[i][j]-sum)/U[j][j];      //Llenado de elementos restantes de L
                    }
                }
            }
        }
    }

        printf("\t\n\n L =");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)

                        printf ("\t %10.2f",L[i][j]);
            printf("\t \n    ");
    }

        printf("\t\n\n U =");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
                         printf ("\t%10.2f",U[i][j]);
            printf("\t\n    ");
    }

    Y[0]=B[0]/L[0][0];
    for(i=1;i<n;i++)
    {
        sum=0;
        for(j=0;j<i;j++)
        {
            sum=sum+Y[j]*L[i][j];

        }
        Y[i]=B[i]-sum;
    }
    printf("\t\n\n Y =");
    for(i=0;i<n;i++)
    {
                printf ("\t%10.2f",Y[i]);
            printf("\t\n    ");
    }

    X[n-1]=Y[n-1]/U[n-1][n-1];
    for(i=n-2;i>=0;i--){
        sum=0;
        for(j=n-1;j>i;j--)
            sum=sum+X[j]*U[i][j];
        X[i]=(Y[i]-sum)/U[i][i];
    }

    printf("\n\tLa solucion es :\n");
    for(i=0;i<n;i++)
        printf("\n\t x[%d] = %.2f ",i+1,X[i]);
    printf("\t\n\n");
}
		
}
void rangodelaMatriz()
{
	int  n, i, j, k;
	float aux, pivote, pivote1, det=1;
	cout << "\n\t Para la encontrar el rango , necesitamos una matriz cuadrada";
    cout << "\n\t Dimension de la matriz n:"; cin>> n;
    
    int** A = new int*[n];
    for( int i = 0; i < n; i++ )
        A[i] = new int[n];
 
    leerMatriz( A, n, n );
    
    int** B = new int*[n];
    for( int i = 0; i < n; i++ )
        B[i] = new int[n];
        
    for( i=0;i<n;i++){
    	pivote=A[i][i];
    	for( j=i+1 ; j<n; j++ ){
    		pivote1=A[j][i];
    		aux=pivote1/pivote;
    		for( k=0; k<n ; k++){
    			A[j][k]=A[j][k]-aux*A[i][k];	
			}
		}
	}
	//para el determinante//
	for(i=0;i<n;i++){
		det*=A[i][i];	
	}
	
	cout << "\n\t Matriz A:\n";
    imprimirMatriz( A, n, n );
    cout << "\n\t El Rango es igual a :"<<n-1<<endl;	
	

}
int multiplicarEscalar()
{
	int fil, col, escalar;
 
    printf( "\n\tNumero de filas de la matriz: " );
    scanf( "\t%d", &fil );
    printf( "\tNumero de columnas de la matriz: " );
    scanf( "\t%d", &col );
    printf( "\tEscalar: " );
    scanf( "\t%d", &escalar );
 
    int matriz[fil][col];
 
    printf( "\n\tRellenar matriz:\n" );
    for( int i = 0; i < fil; i++ )
        for( int j = 0; j < col; j++ ) {
            printf( "\t[%d][%d]: ", i, j );
            scanf( "\t%d", &matriz[i][j] );
        }
 
    for( int i = 0; i < fil; i++ )
        for( int j = 0; j < col; j++ )
            matriz[i][j] *= escalar;
 
   for( int i = 0; i < fil; i++ ) {
        printf( "\n\t" );
        for( int j = 0; j < col; j++ ) {
            printf( "\t%d ", matriz[i][j] );
        }
    }
 
    printf( "\n\t" );
 
    return main();

}
void matrizTriangular()
{
int i=0,j=0,k=0,n=0;
	cout << "\t Matriz Triangular";
cout << endl;
cout << "\t El orden de la matriz debe ser mayor o igual que 2 y entero." << endl;
cout << "\t Ingresa el orden de la matriz: ";
cin >> n;

if(n<=1){
    cout << endl;
    cout << "\t No ha ingresado un valor correcto. Cerrando el programa...";
    cout << endl;

} else {
    float A[n][n]={0}, B[n]={0}, X[n]={0}, L[n][n]={0}, Y[n]={0}, U[n][n]={0},sum=0;
    cout << "\t La matriz es de " << n << "x" << n <<".";
    cout << endl << endl;


    cout<<"\t Ingrese los coeficientes de la matriz A de coeficientes: ";
    cout << endl;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            cout << "\t Ingrese el elemento A["<<i<<"]["<<j<<"]: ";
            cin >> A[i][j];
        }
    }

    for(i=0;i<n;i++){
        for(j=0;j<n;j++)
            if(i>j){
              U[i][j]=0;   
            }
            else if(i==j){
              L[i][j]=1;   
            } else{
              L[i][j]=0;   
            }
    }

    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            sum=0;
            if(i<=j){             
                for(k=0;k<n;k++){
                    if(k!=i){
                        sum=sum+L[i][k]*U[k][j];
                    }else {
                        U[i][j]=A[i][j]-sum;            
                    }
                }
            } else{                 
                for(k=0;k<n;k++){
                    if(k!=j){
                        sum=sum+L[i][k]*U[k][j];
                    }else {
                        L[i][j]=(A[i][j]-sum)/U[j][j];      //Llenado de elementos restantes de L
                    }
                }
            }
        }
    }
        printf("\t\n\n\t Matriz triangular inferior :\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)

                        printf ("\t %10.2f",L[i][j]);
            printf("\t \n    ");
    }

        printf("\t\n\n\t Matriz triangular superior :\n ");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
                         printf ("\t%10.2f",L[j][i]);
            printf("\t\n    ");
    }
}
}
int autovaloresautovectores()
{
	int i,j,m;
	float det, aux , av1, av2;
	float A[2][2]={0};
	
	cout << "\n\t Valores y vectores propios ";
    cout <<"\t\n Ingrese los coeficientes de la matriz A de coeficientes: ";
    cout << endl;
    for(i=0;i<2;i++){
        for(j=0;j<2;j++){
            cout << "\t Ingrese el elemento A["<<i<<"]["<<j<<"]: ";
            cin >> A[i][j];
        }
    }
    det=(A[0][0]*A[1][1])-(A[0][1]*A[1][0]);
    aux=(-A[0][0]-A[1][1]);
    av1==((-aux+sqrt((aux*aux)-(4*det)))/2);
    av2==((-aux-sqrt((aux*aux)-(4*det)))/2);
    
    cout<<"\n\t Valor propio 1 = "<<av1;
    cout<<"\n\t Valor propio 2 = "<<av2;
    
    float x=(A[0][0]-av1);
    float y=(-A[0][1]);
    float z=(A[0][0]-av2);
    
    cout<<"\n\n\t Vector propio 1 = "<<" [ "<< y <<" , "<< x<<" ] ";
    cout<<"\n\n\t Vector propio 2 = "<<" [ "<< y <<" , "<< z<<" ] "<< endl;

    
    return main();
	
}
int matrizDiagonal()
{
    int i, j, m, n, flag = 0, A[10][10];
    cout << "\n\t Diagonal de una matriz  ";
    cout << "\n\t Introducir Filas : "; cin>>m;
    cout << "\n\t Introducir columnas : "; cin>>n;
    if (m != n)
    {
        cout << "No es una matriz cuadrada!";
        return main();
    }
    cout << "\t Introducir elementos de la Matriz \n";
    for (i = 0; i < m; i++)
        for (j = 0; j < n; j++){
        	cout<<"\t Matriz A ["<<i<<"]["<<j<<"]";
        	cin >> A[i][j];
		}
    for (i = 0; i < m; i++)
        for (j = 0; j < n; j++)
            if (i == j)
            {
                if (A[i][j] == 0)
                    flag = 1;
            }
            else
            {
                if (A[i][j] != 0)
                    flag = 1;
            }
    if (flag == 1)
        cout << "\n\t La matriz no tiene diagonal principal";
    else
    {
        cout << "\n\t La diagonal de la matriz es :\n ";	
        for (i = 0; i < m; i++)
        {
        	cout << "\t\t |";
            for (j = 0; j < n; j++)	
                cout <<"\t "<< A[i][j] << " ";
            cout << "\n ";
        }
    }
    return 0;
}
void determinante()
{
	int  n, i, j, k;
	float aux, pivote, pivote1, det=1;
	cout << "\n\t Para la encontrar la determinante, necesitamos una matriz cuadrada";
    cout << "\n\t Dimension de la matriz n:"; cin>> n;
    
    int** A = new int*[n];
    for( int i = 0; i < n; i++ )
        A[i] = new int[n];
 
    leerMatriz( A, n, n );
    
    int** B = new int*[n];
    for( int i = 0; i < n; i++ )
        B[i] = new int[n];
        
    for( i=0;i<n;i++){
    	pivote=A[i][i];
    	for( j=i+1 ; j<n; j++ ){
    		pivote1=A[j][i];
    		aux=pivote1/pivote;
    		for( k=0; k<n ; k++){
    			A[j][k]=A[j][k]-aux*A[i][k];
    			//B[i][j]=A[j][k]-aux*A[i][k];
    		
			}
		}
	}
	//para el determinante//
	for(i=0;i<n;i++){
		det*=A[i][i];	
	}
	
	cout << "\n\t Matriz A:\n";
    imprimirMatriz( A, n, n );
    cout << "\n\t LA DETERMINANTE ES IGUAL A :"<<det<<endl;	
}
void factorizacionCho()
{
	int i=0,j=0,k=0,n=0;
	cout << "\t Factorizacion Cholesky \n";
	cout << "\t El orden de la matriz debe ser mayor o igual que 2" << endl;
	cout << "\t Ingresa el orden de la matriz: ";
	cin >> n;
if(n<=1){
    cout << endl;
    cout << "\t No ha ingresado un valor correcto. Cerrando el programa...";
    cout << endl;

} else {
    float A[n][n]={0}, B[n]={0}, X[n]={0}, L[n][n]={0}, Y[n]={0}, U[n][n]={0},sum=0;
    cout << endl;
    cout<<"\t Ingrese los coeficientes de la matriz A SIMETRICA : ";
    cout << endl;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            cout << "\t Ingrese el elemento A["<<i<<"]["<<j<<"]: ";
            cin >> A[i][j];
        }
    }
    cout <<endl;
    cout << "\t Ingrese la matriz B:" << endl;
    for(i=0;i<n;i++){
        cout << "\t Ingrese el elemento B["<<i<<"]: ";
        cin >> B[i];
    }
    for(i=0;i<n;i++){
        for(j=0;j<n;j++)
            if(i>j){
              U[i][j]=0;   
            }
            else if(i==j){
              L[i][j]=1;   
            } else{
              L[i][j]=0;   
            }
    }

    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            sum=0;
            if(i<=j){             
                for(k=0;k<n;k++){
                    if(k!=i){
                        sum=sum+L[i][k]*U[k][j];
                    }else {
                        U[i][j]=A[i][j]-sum;            
                    }
                }
            } else{                 
                for(k=0;k<n;k++){
                    if(k!=j){
                        sum=sum+L[i][k]*U[k][j];
                    }else {
                        L[i][j]=(A[i][j]-sum)/U[j][j];      //Llenado de elementos restantes de L
                    }
                }
            }
        }
    }

        printf("\t\t\n\n L =");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)

            printf ("\t %10.2f",L[i][j]);
            printf("\t \n    ");
    }

    printf("\t\t\n\n L^t =");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
                         printf ("\t%10.2f",L[j][i]);
            printf("\t\n    ");
    }

    Y[0]=B[0]/L[0][0];
    for(i=1;i<n;i++)
    {
        sum=0;
        for(j=0;j<i;j++)
        {
            sum=sum+Y[j]*L[i][j];

        }
        Y[i]=B[i]-sum;
    }


    X[n-1]=Y[n-1]/U[n-1][n-1];
    for(i=n-2;i>=0;i--){
        sum=0;
        for(j=n-1;j>i;j--)
            sum=sum+X[j]*U[i][j];
        X[i]=(Y[i]-sum)/U[i][i];
    }

    printf("\n\tLa solucion es :\n");
    for(i=0;i<n;i++)
        printf("\n\t x[%d] = %.2f ",i+1,X[i]);
    printf("\t\n\n");

}
}
